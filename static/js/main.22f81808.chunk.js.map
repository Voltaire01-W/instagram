{"version":3,"sources":["constants/routes.js","context/firebase.js","lib/firebase.js","context/user.js","components/loader.js","helpers/protected-route.js","App.js","hooks/use-auth-listener.js","index.js"],"names":["DASHBOARD","LOGIN","SIGN_UP","PROFILE","NOT_FOUND","FirebaseContext","createContext","firebase","Firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","FieldValue","firestore","UserContext","ReactLoader","type","color","height","width","className","ProtectedRoute","user","children","rest","render","location","React","cloneElement","to","pathname","ROUTES","state","from","Login","lazy","SignUp","Dashboard","Profile","NotFound","App","useState","JSON","parse","localStorage","getItem","setUser","useContext","useEffect","listener","auth","onAuthStateChanged","authUser","setItem","stringify","removeItem","useAuthListener","Provider","value","fallback","path","component","exact","ReactDOM","document","getElementById"],"mappings":"uGAAA,0KAAO,IAAMA,EAAY,aACZC,EAAQ,SACRC,EAAU,WACVC,EAAU,eACVC,EAAY,c,gCCJzB,WAEMC,EAAkBC,wBAAc,MACvBD,O,gCCHf,gFAcME,GAdN,YAciBC,IAASC,cAVX,CACbC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBAITC,EAAeT,IAASU,UAAxBD,Y,gCCfR,WAEME,EAAcb,wBAAc,MACnBa,O,wICDA,SAASC,IACtB,OACE,cAAC,IAAD,CACEC,KAAK,WACLC,MAAM,YACNC,OAAQ,GACRC,MAAO,GACPC,UAAU,8B,wDCJD,SAASC,EAAT,GAAsD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAaC,EAAQ,mCAClE,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAIJ,EACKK,IAAMC,aAAaL,EAAU,CAAED,SAGnCA,EAWE,KATH,cAAC,IAAD,CACEO,GAAI,CACFC,SAAUC,IACVC,MAAO,CAAEC,KAAMP,UCV/B,IAAMQ,EAAQC,gBAAK,kBAAM,gCACnBC,EAASD,gBAAK,kBAAM,gCACpBE,EAAYF,gBAAK,kBAAM,6DACvBG,EAAUH,gBAAK,kBAAM,sDACrBI,EAAWJ,gBAAK,kBAAM,gCAEb,SAASK,IAAO,IACrBlB,ECbK,WAA4B,IAAD,EAChBmB,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,cADzB,mBACjCvB,EADiC,KAC3BwB,EAD2B,KAEhC5C,EAAa6C,qBAAW/C,KAAxBE,SAkBR,OAhBA8C,qBAAU,WACR,IAAMC,EAAW/C,EAASgD,OAAOC,oBAAmB,SAACC,GAC/CA,GAEFR,aAAaS,QAAQ,WAAYX,KAAKY,UAAUF,IAChDN,EAAQM,KAGRR,aAAaW,WAAW,YACxBT,EAAQ,UAIZ,OAAO,kBAAMG,OACZ,CAAC/C,IAEG,CAAEoB,QDPQkC,GAATlC,KAER,OACE,cAAC,IAAYmC,SAAb,CAAsBC,MAAO,CAAEpC,QAA/B,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUqC,SAAU,cAAC5C,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6C,KAAM7B,IAAc8B,UAAW3B,IACtC,cAAC,IAAD,CAAO0B,KAAM7B,IAAgB8B,UAAWzB,IACxC,cAAC,IAAD,CAAOwB,KAAM7B,IAAgB8B,UAAWvB,IACxC,cAACjB,EAAD,CAAgBC,KAAMA,EAAMsC,KAAM7B,IAAkB+B,OAAK,EAAzD,SACE,cAACzB,EAAD,MAEF,cAAC,IAAD,CAAOwB,UAAWtB,a,kBEtB9BwB,IAAStC,OACP,cAAC,IAAgBgC,SAAjB,CAA0BC,MAAO,CAAExD,aAAUU,gBAA7C,SACE,cAAC4B,EAAD,MAEFwB,SAASC,eAAe,W","file":"static/js/main.22f81808.chunk.js","sourcesContent":["export const DASHBOARD = '/instagram';\nexport const LOGIN = '/login';\nexport const SIGN_UP = '/sign-up';\nexport const PROFILE = '/p/:username';\nexport const NOT_FOUND = '/not-found';\n","import { createContext } from 'react';\n\nconst FirebaseContext = createContext(null);\nexport default FirebaseContext;\n","import Firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: \"AIzaSyB_OOdqTMisAAoMaTqDaagrUm8TTVCep2c\",\n  authDomain: \"instagram-d5bc5.firebaseapp.com\",\n  projectId: \"instagram-d5bc5\",\n  storageBucket: \"instagram-d5bc5.appspot.com\",\n  messagingSenderId: \"474427259921\",\n  appId: \"1:474427259921:web:756efc1ca0086b7b8685b0\",\n  measurementId: \"G-MZJC80RZR1\"\n};\n\nconst firebase = Firebase.initializeApp(config);\nconst { FieldValue } = Firebase.firestore;\n\nexport { firebase, FieldValue };\n","import { createContext } from 'react';\n\nconst UserContext = createContext(null);\nexport default UserContext;\n","import Loader from 'react-loader-spinner';\n\nexport default function ReactLoader() {\n  return (\n    <Loader\n      type=\"TailSpin\"\n      color=\"#00000059\"\n      height={70}\n      width={70}\n      className=\"flex justify-center mt-12\"\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\nimport * as ROUTES from '../constants/routes';\n\nexport default function ProtectedRoute({ user, children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => {\n        if (user) {\n          return React.cloneElement(children, { user });\n        }\n\n        if (!user) {\n          return (\n            <Redirect\n              to={{\n                pathname: ROUTES.LOGIN,\n                state: { from: location }\n              }}\n            />\n          );\n        }\n\n        return null;\n      }}\n    />\n  );\n}\n\nProtectedRoute.propTypes = {\n  user: PropTypes.object,\n  children: PropTypes.object.isRequired\n};\n","import { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ReactLoader from './components/loader';\nimport * as ROUTES from './constants/routes';\nimport UserContext from './context/user';\nimport useAuthListener from './hooks/use-auth-listener';\n\nimport ProtectedRoute from './helpers/protected-route';\n\nconst Login = lazy(() => import('./pages/login'));\nconst SignUp = lazy(() => import('./pages/sign-up'));\nconst Dashboard = lazy(() => import('./pages/dashboard'));\nconst Profile = lazy(() => import('./pages/profile'));\nconst NotFound = lazy(() => import('./pages/not-found'));\n\nexport default function App() {\n  const { user } = useAuthListener();\n\n  return (\n    <UserContext.Provider value={{ user }}>\n      <Router>\n        <Suspense fallback={<ReactLoader />}>\n          <Switch>\n            <Route path={ROUTES.LOGIN} component={Login} />\n            <Route path={ROUTES.SIGN_UP} component={SignUp} />\n            <Route path={ROUTES.PROFILE} component={Profile} />\n            <ProtectedRoute user={user} path={ROUTES.DASHBOARD} exact>\n              <Dashboard />\n            </ProtectedRoute>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </UserContext.Provider>\n  );\n}\n","import { useState, useEffect, useContext } from 'react';\nimport FirebaseContext from '../context/firebase';\n\nexport default function useAuthListener() {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));\n  const { firebase } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    const listener = firebase.auth().onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // we have a user...therefore we can store the user in localstorage\n        localStorage.setItem('authUser', JSON.stringify(authUser));\n        setUser(authUser);\n      } else {\n        // we don't have an authUser, therefore clear the localstorage\n        localStorage.removeItem('authUser');\n        setUser(null);\n      }\n    });\n\n    return () => listener();\n  }, [firebase]);\n\n  return { user };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport FirebaseContext from './context/firebase';\nimport { firebase, FieldValue } from './lib/firebase';\nimport './styles/app.css';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={{ firebase, FieldValue }}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}